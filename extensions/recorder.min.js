(()=>{var e,t,r="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},o={};e=o,t=function(e){"use strict";var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol:function(e){return"Symbol("+e+")"};function o(){}var n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r?r:void 0;function i(e){return"object"==typeof e&&null!==e||"function"==typeof e}var a=o,l=Promise,u=Promise.prototype.then,s=Promise.resolve.bind(l),c=Promise.reject.bind(l);function d(e){return new l(e)}function f(e){return s(e)}function b(e){return c(e)}function p(e,t,r){return u.call(e,t,r)}function h(e,t,r){p(p(e,t,r),void 0,a)}function _(e,t){h(e,t)}function m(e,t){h(e,void 0,t)}function v(e,t,r){return p(e,t,r)}function y(e){p(e,void 0,a)}var g=function(){var e=n&&n.queueMicrotask;if("function"==typeof e)return e;var t=f(void 0);return function(e){return p(t,e)}}();function w(e,t,r){if("function"!=typeof e)throw new TypeError("Argument is not a function");return Function.prototype.apply.call(e,t,r)}function S(e,t,r){try{return f(w(e,t,r))}catch(e){return b(e)}}var R=function(){function e(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}return Object.defineProperty(e.prototype,"length",{get:function(){return this._size},enumerable:!1,configurable:!0}),e.prototype.push=function(e){var t=this._back,r=t;16383===t._elements.length&&(r={_elements:[],_next:void 0}),t._elements.push(e),r!==t&&(this._back=r,t._next=r),++this._size},e.prototype.shift=function(){var e=this._front,t=e,r=this._cursor,o=r+1,n=e._elements,i=n[r];return 16384===o&&(t=e._next,o=0),--this._size,this._cursor=o,e!==t&&(this._front=t),n[r]=void 0,i},e.prototype.forEach=function(e){for(var t=this._cursor,r=this._front,o=r._elements;!(t===o.length&&void 0===r._next||t===o.length&&(t=0,0===(o=(r=r._next)._elements).length));)e(o[t]),++t},e.prototype.peek=function(){var e=this._front,t=this._cursor;return e._elements[t]},e}();function T(e,t){var r;e._ownerReadableStream=t,t._reader=e,"readable"===t._state?q(e):"closed"===t._state?(q(r=e),W(r)):O(e,t._storedError)}function P(e,t){return Rr(e._ownerReadableStream,t)}function E(e){"readable"===e._ownerReadableStream._state?j(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")):O(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")),e._ownerReadableStream._reader=void 0,e._ownerReadableStream=void 0}function C(e){return new TypeError("Cannot "+e+" a stream using a released reader")}function q(e){e._closedPromise=d((function(t,r){e._closedPromise_resolve=t,e._closedPromise_reject=r}))}function O(e,t){q(e),j(e,t)}function j(e,t){void 0!==e._closedPromise_reject&&(y(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}function W(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}var k=t("[[AbortSteps]]"),A=t("[[ErrorSteps]]"),z=t("[[CancelSteps]]"),B=t("[[PullSteps]]"),L=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)},I=Math.trunc||function(e){return e<0?Math.ceil(e):Math.floor(e)};function M(e,t){if(void 0!==e&&"object"!=typeof(r=e)&&"function"!=typeof r)throw new TypeError(t+" is not an object.");var r}function F(e,t){if("function"!=typeof e)throw new TypeError(t+" is not a function.")}function D(e,t){if(("object"!=typeof(r=e)||null===r)&&"function"!=typeof r)throw new TypeError(t+" is not an object.");var r}function x(e,t,r){if(void 0===e)throw new TypeError("Parameter "+t+" is required in '"+r+"'.")}function U(e,t,r){if(void 0===e)throw new TypeError(t+" is required in '"+r+"'.")}function Q(e){return Number(e)}function N(e){return 0===e?0:e}function Y(e,t){var r=Number.MAX_SAFE_INTEGER,o=Number(e);if(o=N(o),!L(o))throw new TypeError(t+" is not a finite number");if((o=N(I(o)))<0||o>r)throw new TypeError(t+" is outside the accepted range of 0 to "+r+", inclusive");return L(o)&&0!==o?o:0}function H(e,t){if(!wr(e))throw new TypeError(t+" is not a ReadableStream.")}function V(e){return new ee(e)}function G(e,t){e._reader._readRequests.push(t)}function K(e,t,r){var o=e._reader._readRequests.shift();r?o._closeSteps():o._chunkSteps(t)}function X(e){return e._reader._readRequests.length}function J(e){var t=e._reader;return void 0!==t&&!!te(t)}var Z,$,ee=function(){function e(e){if(x(e,1,"ReadableStreamDefaultReader"),H(e,"First parameter"),Sr(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");T(this,e),this._readRequests=new R}return Object.defineProperty(e.prototype,"closed",{get:function(){return te(this)?this._closedPromise:b(oe("closed"))},enumerable:!1,configurable:!0}),e.prototype.cancel=function(e){return void 0===e&&(e=void 0),te(this)?void 0===this._ownerReadableStream?b(C("cancel")):P(this,e):b(oe("cancel"))},e.prototype.read=function(){if(!te(this))return b(oe("read"));if(void 0===this._ownerReadableStream)return b(C("read from"));var e,t,r=d((function(r,o){e=r,t=o}));return re(this,{_chunkSteps:function(t){return e({value:t,done:!1})},_closeSteps:function(){return e({value:void 0,done:!0})},_errorSteps:function(e){return t(e)}}),r},e.prototype.releaseLock=function(){if(!te(this))throw oe("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");E(this)}},e}();function te(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readRequests")&&e instanceof ee}function re(e,t){var r=e._ownerReadableStream;r._disturbed=!0,"closed"===r._state?t._closeSteps():"errored"===r._state?t._errorSteps(r._storedError):r._readableStreamController[B](t)}function oe(e){return new TypeError("ReadableStreamDefaultReader.prototype."+e+" can only be used on a ReadableStreamDefaultReader")}Object.defineProperties(ee.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(ee.prototype,t.toStringTag,{value:"ReadableStreamDefaultReader",configurable:!0}),"symbol"==typeof t.asyncIterator&&((Z={})[t.asyncIterator]=function(){return this},$=Z,Object.defineProperty($,t.asyncIterator,{enumerable:!1}));var ne=function(){function e(e,t){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=e,this._preventCancel=t}return e.prototype.next=function(){var e=this,t=function(){return e._nextSteps()};return this._ongoingPromise=this._ongoingPromise?v(this._ongoingPromise,t,t):t(),this._ongoingPromise},e.prototype.return=function(e){var t=this,r=function(){return t._returnSteps(e)};return this._ongoingPromise?v(this._ongoingPromise,r,r):r()},e.prototype._nextSteps=function(){var e=this;if(this._isFinished)return Promise.resolve({value:void 0,done:!0});var t,r,o=this._reader;if(void 0===o._ownerReadableStream)return b(C("iterate"));var n=d((function(e,o){t=e,r=o}));return re(o,{_chunkSteps:function(r){e._ongoingPromise=void 0,g((function(){return t({value:r,done:!1})}))},_closeSteps:function(){e._ongoingPromise=void 0,e._isFinished=!0,E(o),t({value:void 0,done:!0})},_errorSteps:function(t){e._ongoingPromise=void 0,e._isFinished=!0,E(o),r(t)}}),n},e.prototype._returnSteps=function(e){if(this._isFinished)return Promise.resolve({value:e,done:!0});this._isFinished=!0;var t=this._reader;if(void 0===t._ownerReadableStream)return b(C("finish iterating"));if(!this._preventCancel){var r=P(t,e);return E(t),v(r,(function(){return{value:e,done:!0}}))}return E(t),f({value:e,done:!0})},e}(),ie={next:function(){return ae(this)?this._asyncIteratorImpl.next():b(le("next"))},return:function(e){return ae(this)?this._asyncIteratorImpl.return(e):b(le("return"))}};function ae(e){if(!i(e))return!1;if(!Object.prototype.hasOwnProperty.call(e,"_asyncIteratorImpl"))return!1;try{return e._asyncIteratorImpl instanceof ne}catch(e){return!1}}function le(e){return new TypeError("ReadableStreamAsyncIterator."+e+" can only be used on a ReadableSteamAsyncIterator")}void 0!==$&&Object.setPrototypeOf(ie,$);var ue=Number.isNaN||function(e){return e!=e};function se(e){return e.slice()}function ce(e,t,r,o,n){new Uint8Array(e).set(new Uint8Array(r,o,n),t)}function de(e,t,r){if(e.slice)return e.slice(t,r);var o=r-t,n=new ArrayBuffer(o);return ce(n,0,e,t,o),n}function fe(e){var t=de(e.buffer,e.byteOffset,e.byteOffset+e.byteLength);return new Uint8Array(t)}function be(e){var t=e._queue.shift();return e._queueTotalSize-=t.size,e._queueTotalSize<0&&(e._queueTotalSize=0),t.value}function pe(e,t,r){if("number"!=typeof(o=r)||ue(o)||o<0||r===1/0)throw new RangeError("Size must be a finite, non-NaN, non-negative number.");var o;e._queue.push({value:t,size:r}),e._queueTotalSize+=r}function he(e){e._queue=new R,e._queueTotalSize=0}var _e=function(){function e(){throw new TypeError("Illegal constructor")}return Object.defineProperty(e.prototype,"view",{get:function(){if(!ye(this))throw xe("view");return this._view},enumerable:!1,configurable:!0}),e.prototype.respond=function(e){if(!ye(this))throw xe("respond");if(x(e,1,"respond"),e=Y(e,"First parameter"),void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");this._view.buffer,Me(this._associatedReadableByteStreamController,e)},e.prototype.respondWithNewView=function(e){if(!ye(this))throw xe("respondWithNewView");if(x(e,1,"respondWithNewView"),!ArrayBuffer.isView(e))throw new TypeError("You can only respond with array buffer views");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");e.buffer,Fe(this._associatedReadableByteStreamController,e)},e}();Object.defineProperties(_e.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(_e.prototype,t.toStringTag,{value:"ReadableStreamBYOBRequest",configurable:!0});var me=function(){function e(){throw new TypeError("Illegal constructor")}return Object.defineProperty(e.prototype,"byobRequest",{get:function(){if(!ve(this))throw Ue("byobRequest");return Le(this)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"desiredSize",{get:function(){if(!ve(this))throw Ue("desiredSize");return Ie(this)},enumerable:!1,configurable:!0}),e.prototype.close=function(){if(!ve(this))throw Ue("close");if(this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");var e=this._controlledReadableByteStream._state;if("readable"!==e)throw new TypeError("The stream (in "+e+" state) is not in the readable state and cannot be closed");Ae(this)},e.prototype.enqueue=function(e){if(!ve(this))throw Ue("enqueue");if(x(e,1,"enqueue"),!ArrayBuffer.isView(e))throw new TypeError("chunk must be an array buffer view");if(0===e.byteLength)throw new TypeError("chunk must have non-zero byteLength");if(0===e.buffer.byteLength)throw new TypeError("chunk's buffer must have non-zero byteLength");if(this._closeRequested)throw new TypeError("stream is closed or draining");var t=this._controlledReadableByteStream._state;if("readable"!==t)throw new TypeError("The stream (in "+t+" state) is not in the readable state and cannot be enqueued to");ze(this,e)},e.prototype.error=function(e){if(void 0===e&&(e=void 0),!ve(this))throw Ue("error");Be(this,e)},e.prototype[z]=function(e){we(this),he(this);var t=this._cancelAlgorithm(e);return ke(this),t},e.prototype[B]=function(e){var t=this._controlledReadableByteStream;if(this._queueTotalSize>0){var r=this._queue.shift();this._queueTotalSize-=r.byteLength,Ce(this);var o=new Uint8Array(r.buffer,r.byteOffset,r.byteLength);e._chunkSteps(o)}else{var n=this._autoAllocateChunkSize;if(void 0!==n){var i=void 0;try{i=new ArrayBuffer(n)}catch(t){return void e._errorSteps(t)}var a={buffer:i,bufferByteLength:n,byteOffset:0,byteLength:n,bytesFilled:0,elementSize:1,viewConstructor:Uint8Array,readerType:"default"};this._pendingPullIntos.push(a)}G(t,e),ge(this)}},e}();function ve(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableByteStream")&&e instanceof me}function ye(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_associatedReadableByteStreamController")&&e instanceof _e}function ge(e){var t,r;"readable"===(r=(t=e)._controlledReadableByteStream)._state&&!t._closeRequested&&t._started&&(J(r)&&X(r)>0||He(r)&&Ye(r)>0||Ie(t)>0)&&(e._pulling?e._pullAgain=!0:(e._pulling=!0,h(e._pullAlgorithm(),(function(){e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,ge(e))}),(function(t){Be(e,t)}))))}function we(e){qe(e),e._pendingPullIntos=new R}function Se(e,t){var r=!1;"closed"===e._state&&(r=!0);var o,n,i,a=Re(t);"default"===t.readerType?K(e,a,r):(o=a,n=r,i=e._reader._readIntoRequests.shift(),n?i._closeSteps(o):i._chunkSteps(o))}function Re(e){var t=e.bytesFilled,r=e.elementSize;return new e.viewConstructor(e.buffer,e.byteOffset,t/r)}function Te(e,t,r,o){e._queue.push({buffer:t,byteOffset:r,byteLength:o}),e._queueTotalSize+=o}function Pe(e,t){var r=t.elementSize,o=t.bytesFilled-t.bytesFilled%r,n=Math.min(e._queueTotalSize,t.byteLength-t.bytesFilled),i=t.bytesFilled+n,a=i-i%r,l=n,u=!1;a>o&&(l=a-t.bytesFilled,u=!0);for(var s=e._queue;l>0;){var c=s.peek(),d=Math.min(l,c.byteLength),f=t.byteOffset+t.bytesFilled;ce(t.buffer,f,c.buffer,c.byteOffset,d),c.byteLength===d?s.shift():(c.byteOffset+=d,c.byteLength-=d),e._queueTotalSize-=d,Ee(0,d,t),l-=d}return u}function Ee(e,t,r){r.bytesFilled+=t}function Ce(e){0===e._queueTotalSize&&e._closeRequested?(ke(e),Tr(e._controlledReadableByteStream)):ge(e)}function qe(e){null!==e._byobRequest&&(e._byobRequest._associatedReadableByteStreamController=void 0,e._byobRequest._view=null,e._byobRequest=null)}function Oe(e){for(;e._pendingPullIntos.length>0;){if(0===e._queueTotalSize)return;var t=e._pendingPullIntos.peek();Pe(e,t)&&(We(e),Se(e._controlledReadableByteStream,t))}}function je(e,t){var r=e._pendingPullIntos.peek();qe(e),"closed"===e._controlledReadableByteStream._state?function(e,t){var r=e._controlledReadableByteStream;if(He(r))for(;Ye(r)>0;)Se(r,We(e))}(e):function(e,t,r){if(Ee(0,t,r),!(r.bytesFilled<r.elementSize)){We(e);var o=r.bytesFilled%r.elementSize;if(o>0){var n=r.byteOffset+r.bytesFilled,i=de(r.buffer,n-o,n);Te(e,i,0,i.byteLength)}r.bytesFilled-=o,Se(e._controlledReadableByteStream,r),Oe(e)}}(e,t,r),ge(e)}function We(e){return e._pendingPullIntos.shift()}function ke(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0}function Ae(e){var t=e._controlledReadableByteStream;if(!e._closeRequested&&"readable"===t._state)if(e._queueTotalSize>0)e._closeRequested=!0;else{if(e._pendingPullIntos.length>0&&e._pendingPullIntos.peek().bytesFilled>0){var r=new TypeError("Insufficient bytes to fill elements in the given buffer");throw Be(e,r),r}ke(e),Tr(t)}}function ze(e,t){var r=e._controlledReadableByteStream;if(!e._closeRequested&&"readable"===r._state){var o=t.buffer,n=t.byteOffset,i=t.byteLength,a=o;if(e._pendingPullIntos.length>0){var l=e._pendingPullIntos.peek();l.buffer,l.buffer=l.buffer}qe(e),J(r)?0===X(r)?Te(e,a,n,i):(e._pendingPullIntos.length>0&&We(e),K(r,new Uint8Array(a,n,i),!1)):He(r)?(Te(e,a,n,i),Oe(e)):Te(e,a,n,i),ge(e)}}function Be(e,t){var r=e._controlledReadableByteStream;"readable"===r._state&&(we(e),he(e),ke(e),Pr(r,t))}function Le(e){if(null===e._byobRequest&&e._pendingPullIntos.length>0){var t=e._pendingPullIntos.peek(),r=new Uint8Array(t.buffer,t.byteOffset+t.bytesFilled,t.byteLength-t.bytesFilled),o=Object.create(_e.prototype);i=e,a=r,(n=o)._associatedReadableByteStreamController=i,n._view=a,e._byobRequest=o}var n,i,a;return e._byobRequest}function Ie(e){var t=e._controlledReadableByteStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function Me(e,t){var r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t)throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream")}else{if(0===t)throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");if(r.bytesFilled+t>r.byteLength)throw new RangeError("bytesWritten out of range")}r.buffer=r.buffer,je(e,t)}function Fe(e,t){var r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t.byteLength)throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream")}else if(0===t.byteLength)throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");if(r.byteOffset+r.bytesFilled!==t.byteOffset)throw new RangeError("The region specified by view does not match byobRequest");if(r.bufferByteLength!==t.buffer.byteLength)throw new RangeError("The buffer of view has different capacity than byobRequest");if(r.bytesFilled+t.byteLength>r.byteLength)throw new RangeError("The region specified by view is larger than byobRequest");var o=t.byteLength;r.buffer=t.buffer,je(e,o)}function De(e,t,r,o,n,i,a){t._controlledReadableByteStream=e,t._pullAgain=!1,t._pulling=!1,t._byobRequest=null,t._queue=t._queueTotalSize=void 0,he(t),t._closeRequested=!1,t._started=!1,t._strategyHWM=i,t._pullAlgorithm=o,t._cancelAlgorithm=n,t._autoAllocateChunkSize=a,t._pendingPullIntos=new R,e._readableStreamController=t,h(f(r()),(function(){t._started=!0,ge(t)}),(function(e){Be(t,e)}))}function xe(e){return new TypeError("ReadableStreamBYOBRequest.prototype."+e+" can only be used on a ReadableStreamBYOBRequest")}function Ue(e){return new TypeError("ReadableByteStreamController.prototype."+e+" can only be used on a ReadableByteStreamController")}function Qe(e){return new Ve(e)}function Ne(e,t){e._reader._readIntoRequests.push(t)}function Ye(e){return e._reader._readIntoRequests.length}function He(e){var t=e._reader;return void 0!==t&&!!Ge(t)}Object.defineProperties(me.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(me.prototype,t.toStringTag,{value:"ReadableByteStreamController",configurable:!0});var Ve=function(){function e(e){if(x(e,1,"ReadableStreamBYOBReader"),H(e,"First parameter"),Sr(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");if(!ve(e._readableStreamController))throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");T(this,e),this._readIntoRequests=new R}return Object.defineProperty(e.prototype,"closed",{get:function(){return Ge(this)?this._closedPromise:b(Xe("closed"))},enumerable:!1,configurable:!0}),e.prototype.cancel=function(e){return void 0===e&&(e=void 0),Ge(this)?void 0===this._ownerReadableStream?b(C("cancel")):P(this,e):b(Xe("cancel"))},e.prototype.read=function(e){if(!Ge(this))return b(Xe("read"));if(!ArrayBuffer.isView(e))return b(new TypeError("view must be an array buffer view"));if(0===e.byteLength)return b(new TypeError("view must have non-zero byteLength"));if(0===e.buffer.byteLength)return b(new TypeError("view's buffer must have non-zero byteLength"));if(e.buffer,void 0===this._ownerReadableStream)return b(C("read from"));var t,r,o=d((function(e,o){t=e,r=o}));return Ke(this,e,{_chunkSteps:function(e){return t({value:e,done:!1})},_closeSteps:function(e){return t({value:e,done:!0})},_errorSteps:function(e){return r(e)}}),o},e.prototype.releaseLock=function(){if(!Ge(this))throw Xe("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readIntoRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");E(this)}},e}();function Ge(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readIntoRequests")&&e instanceof Ve}function Ke(e,t,r){var o=e._ownerReadableStream;o._disturbed=!0,"errored"===o._state?r._errorSteps(o._storedError):function(e,t,r){var o=e._controlledReadableByteStream,n=1;t.constructor!==DataView&&(n=t.constructor.BYTES_PER_ELEMENT);var i=t.constructor,a=t.buffer,l={buffer:a,bufferByteLength:a.byteLength,byteOffset:t.byteOffset,byteLength:t.byteLength,bytesFilled:0,elementSize:n,viewConstructor:i,readerType:"byob"};if(e._pendingPullIntos.length>0)return e._pendingPullIntos.push(l),void Ne(o,r);if("closed"!==o._state){if(e._queueTotalSize>0){if(Pe(e,l)){var u=Re(l);return Ce(e),void r._chunkSteps(u)}if(e._closeRequested){var s=new TypeError("Insufficient bytes to fill elements in the given buffer");return Be(e,s),void r._errorSteps(s)}}e._pendingPullIntos.push(l),Ne(o,r),ge(e)}else{var c=new i(l.buffer,l.byteOffset,0);r._closeSteps(c)}}(o._readableStreamController,t,r)}function Xe(e){return new TypeError("ReadableStreamBYOBReader.prototype."+e+" can only be used on a ReadableStreamBYOBReader")}function Je(e,t){var r=e.highWaterMark;if(void 0===r)return t;if(ue(r)||r<0)throw new RangeError("Invalid highWaterMark");return r}function Ze(e){return e.size||function(){return 1}}function $e(e,t){M(e,t);var r=null==e?void 0:e.highWaterMark,o=null==e?void 0:e.size;return{highWaterMark:void 0===r?void 0:Q(r),size:void 0===o?void 0:et(o,t+" has member 'size' that")}}function et(e,t){return F(e,t),function(t){return Q(e(t))}}function tt(e,t,r){return F(e,r),function(r){return S(e,t,[r])}}function rt(e,t,r){return F(e,r),function(){return S(e,t,[])}}function ot(e,t,r){return F(e,r),function(r){return w(e,t,[r])}}function nt(e,t,r){return F(e,r),function(r,o){return S(e,t,[r,o])}}function it(e,t){if(!ct(e))throw new TypeError(t+" is not a WritableStream.")}Object.defineProperties(Ve.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Ve.prototype,t.toStringTag,{value:"ReadableStreamBYOBReader",configurable:!0});var at="function"==typeof AbortController,lt=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={}),void 0===e?e=null:D(e,"First parameter");var r=$e(t,"Second parameter"),o=function(e,t){M(e,t);var r=null==e?void 0:e.abort,o=null==e?void 0:e.close,n=null==e?void 0:e.start,i=null==e?void 0:e.type,a=null==e?void 0:e.write;return{abort:void 0===r?void 0:tt(r,e,t+" has member 'abort' that"),close:void 0===o?void 0:rt(o,e,t+" has member 'close' that"),start:void 0===n?void 0:ot(n,e,t+" has member 'start' that"),write:void 0===a?void 0:nt(a,e,t+" has member 'write' that"),type:i}}(e,"First parameter");if(st(this),void 0!==o.type)throw new RangeError("Invalid type is specified");var n,i,a,l,u,s,c,d,b,p=Ze(r);n=this,i=o,a=Je(r,1),l=p,u=Object.create(Ct.prototype),s=function(){},c=function(){return f(void 0)},d=function(){return f(void 0)},b=function(){return f(void 0)},void 0!==i.start&&(s=function(){return i.start(u)}),void 0!==i.write&&(c=function(e){return i.write(e,u)}),void 0!==i.close&&(d=function(){return i.close()}),void 0!==i.abort&&(b=function(e){return i.abort(e)}),Ot(n,u,s,c,d,b,a,l)}return Object.defineProperty(e.prototype,"locked",{get:function(){if(!ct(this))throw Lt("locked");return dt(this)},enumerable:!1,configurable:!0}),e.prototype.abort=function(e){return void 0===e&&(e=void 0),ct(this)?dt(this)?b(new TypeError("Cannot abort a stream that already has a writer")):ft(this,e):b(Lt("abort"))},e.prototype.close=function(){return ct(this)?dt(this)?b(new TypeError("Cannot close a stream that already has a writer")):mt(this)?b(new TypeError("Cannot close an already-closing stream")):bt(this):b(Lt("close"))},e.prototype.getWriter=function(){if(!ct(this))throw Lt("getWriter");return ut(this)},e}();function ut(e){return new gt(e)}function st(e){e._state="writable",e._storedError=void 0,e._writer=void 0,e._writableStreamController=void 0,e._writeRequests=new R,e._inFlightWriteRequest=void 0,e._closeRequest=void 0,e._inFlightCloseRequest=void 0,e._pendingAbortRequest=void 0,e._backpressure=!1}function ct(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_writableStreamController")&&e instanceof lt}function dt(e){return void 0!==e._writer}function ft(e,t){var r;if("closed"===e._state||"errored"===e._state)return f(void 0);e._writableStreamController._abortReason=t,null===(r=e._writableStreamController._abortController)||void 0===r||r.abort();var o=e._state;if("closed"===o||"errored"===o)return f(void 0);if(void 0!==e._pendingAbortRequest)return e._pendingAbortRequest._promise;var n=!1;"erroring"===o&&(n=!0,t=void 0);var i=d((function(r,o){e._pendingAbortRequest={_promise:void 0,_resolve:r,_reject:o,_reason:t,_wasAlreadyErroring:n}}));return e._pendingAbortRequest._promise=i,n||ht(e,t),i}function bt(e){var t=e._state;if("closed"===t||"errored"===t)return b(new TypeError("The stream (in "+t+" state) is not in the writable state and cannot be closed"));var r,o=d((function(t,r){var o={_resolve:t,_reject:r};e._closeRequest=o})),n=e._writer;return void 0!==n&&e._backpressure&&"writable"===t&&Gt(n),pe(r=e._writableStreamController,Et,0),kt(r),o}function pt(e,t){"writable"!==e._state?_t(e):ht(e,t)}function ht(e,t){var r=e._writableStreamController;e._state="erroring",e._storedError=t;var o,n=e._writer;void 0!==n&&Rt(n,t),void 0===(o=e)._inFlightWriteRequest&&void 0===o._inFlightCloseRequest&&r._started&&_t(e)}function _t(e){e._state="errored",e._writableStreamController[A]();var t=e._storedError;if(e._writeRequests.forEach((function(e){e._reject(t)})),e._writeRequests=new R,void 0!==e._pendingAbortRequest){var r=e._pendingAbortRequest;if(e._pendingAbortRequest=void 0,r._wasAlreadyErroring)return r._reject(t),void vt(e);h(e._writableStreamController[k](r._reason),(function(){r._resolve(),vt(e)}),(function(t){r._reject(t),vt(e)}))}else vt(e)}function mt(e){return void 0!==e._closeRequest||void 0!==e._inFlightCloseRequest}function vt(e){void 0!==e._closeRequest&&(e._closeRequest._reject(e._storedError),e._closeRequest=void 0);var t=e._writer;void 0!==t&&Ut(t,e._storedError)}function yt(e,t){var r=e._writer;void 0!==r&&t!==e._backpressure&&(t?Nt(r):Gt(r)),e._backpressure=t}Object.defineProperties(lt.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(lt.prototype,t.toStringTag,{value:"WritableStream",configurable:!0});var gt=function(){function e(e){if(x(e,1,"WritableStreamDefaultWriter"),it(e,"First parameter"),dt(e))throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream=e,e._writer=this;var t=e._state;if("writable"===t)!mt(e)&&e._backpressure?Nt(this):Ht(this),Dt(this);else if("erroring"===t)Yt(this,e._storedError),Dt(this);else if("closed"===t)Ht(this),Dt(this),Qt(this);else{var r=e._storedError;Yt(this,r),xt(this,r)}}return Object.defineProperty(e.prototype,"closed",{get:function(){return wt(this)?this._closedPromise:b(Mt("closed"))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"desiredSize",{get:function(){if(!wt(this))throw Mt("desiredSize");if(void 0===this._ownerWritableStream)throw Ft("desiredSize");return e=this._ownerWritableStream,"errored"===(t=e._state)||"erroring"===t?null:"closed"===t?0:Wt(e._writableStreamController);var e,t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"ready",{get:function(){return wt(this)?this._readyPromise:b(Mt("ready"))},enumerable:!1,configurable:!0}),e.prototype.abort=function(e){return void 0===e&&(e=void 0),wt(this)?void 0===this._ownerWritableStream?b(Ft("abort")):(t=e,ft(this._ownerWritableStream,t)):b(Mt("abort"));var t},e.prototype.close=function(){if(!wt(this))return b(Mt("close"));var e=this._ownerWritableStream;return void 0===e?b(Ft("close")):mt(e)?b(new TypeError("Cannot close an already-closing stream")):St(this)},e.prototype.releaseLock=function(){if(!wt(this))throw Mt("releaseLock");void 0!==this._ownerWritableStream&&Tt(this)},e.prototype.write=function(e){return void 0===e&&(e=void 0),wt(this)?void 0===this._ownerWritableStream?b(Ft("write to")):Pt(this,e):b(Mt("write"))},e}();function wt(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_ownerWritableStream")&&e instanceof gt}function St(e){return bt(e._ownerWritableStream)}function Rt(e,t){"pending"===e._readyPromiseState?Vt(e,t):Yt(e,t)}function Tt(e){var t,r,o=e._ownerWritableStream,n=new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");Rt(e,n),r=n,"pending"===(t=e)._closedPromiseState?Ut(t,r):xt(t,r),o._writer=void 0,e._ownerWritableStream=void 0}function Pt(e,t){var r=e._ownerWritableStream,o=r._writableStreamController,n=function(e,t){try{return e._strategySizeAlgorithm(t)}catch(t){return At(e,t),1}}(o,t);if(r!==e._ownerWritableStream)return b(Ft("write to"));var i=r._state;if("errored"===i)return b(r._storedError);if(mt(r)||"closed"===i)return b(new TypeError("The stream is closing or closed and cannot be written to"));if("erroring"===i)return b(r._storedError);var a,l=(a=r,d((function(e,t){var r={_resolve:e,_reject:t};a._writeRequests.push(r)})));return function(e,t,r){try{pe(e,t,r)}catch(t){return void At(e,t)}var o=e._controlledWritableStream;mt(o)||"writable"!==o._state||yt(o,zt(e)),kt(e)}(o,t,n),l}Object.defineProperties(gt.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(gt.prototype,t.toStringTag,{value:"WritableStreamDefaultWriter",configurable:!0});var Et={},Ct=function(){function e(){throw new TypeError("Illegal constructor")}return Object.defineProperty(e.prototype,"abortReason",{get:function(){if(!qt(this))throw It("abortReason");return this._abortReason},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"signal",{get:function(){if(!qt(this))throw It("signal");if(void 0===this._abortController)throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");return this._abortController.signal},enumerable:!1,configurable:!0}),e.prototype.error=function(e){if(void 0===e&&(e=void 0),!qt(this))throw It("error");"writable"===this._controlledWritableStream._state&&Bt(this,e)},e.prototype[k]=function(e){var t=this._abortAlgorithm(e);return jt(this),t},e.prototype[A]=function(){he(this)},e}();function qt(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledWritableStream")&&e instanceof Ct}function Ot(e,t,r,o,n,i,a,l){t._controlledWritableStream=e,e._writableStreamController=t,t._queue=void 0,t._queueTotalSize=void 0,he(t),t._abortReason=void 0,t._abortController=function(){if(at)return new AbortController}(),t._started=!1,t._strategySizeAlgorithm=l,t._strategyHWM=a,t._writeAlgorithm=o,t._closeAlgorithm=n,t._abortAlgorithm=i;var u=zt(t);yt(e,u),h(f(r()),(function(){t._started=!0,kt(t)}),(function(r){t._started=!0,pt(e,r)}))}function jt(e){e._writeAlgorithm=void 0,e._closeAlgorithm=void 0,e._abortAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function Wt(e){return e._strategyHWM-e._queueTotalSize}function kt(e){var t,r,o,n,i=e._controlledWritableStream;if(e._started&&void 0===i._inFlightWriteRequest)if("erroring"!==i._state){if(0!==e._queue.length){var a=e._queue.peek().value;a===Et?function(e){var t,r=e._controlledWritableStream;(t=r)._inFlightCloseRequest=t._closeRequest,t._closeRequest=void 0,be(e);var o=e._closeAlgorithm();jt(e),h(o,(function(){!function(e){e._inFlightCloseRequest._resolve(void 0),e._inFlightCloseRequest=void 0,"erroring"===e._state&&(e._storedError=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._resolve(),e._pendingAbortRequest=void 0)),e._state="closed";var t=e._writer;void 0!==t&&Qt(t)}(r)}),(function(e){!function(e,t){e._inFlightCloseRequest._reject(t),e._inFlightCloseRequest=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._reject(t),e._pendingAbortRequest=void 0),pt(e,t)}(r,e)}))}(e):(r=a,n=(t=e)._controlledWritableStream,(o=n)._inFlightWriteRequest=o._writeRequests.shift(),h(t._writeAlgorithm(r),(function(){!function(e){e._inFlightWriteRequest._resolve(void 0),e._inFlightWriteRequest=void 0}(n);var e=n._state;if(be(t),!mt(n)&&"writable"===e){var r=zt(t);yt(n,r)}kt(t)}),(function(e){"writable"===n._state&&jt(t),function(e,t){e._inFlightWriteRequest._reject(t),e._inFlightWriteRequest=void 0,pt(e,t)}(n,e)})))}}else _t(i)}function At(e,t){"writable"===e._controlledWritableStream._state&&Bt(e,t)}function zt(e){return Wt(e)<=0}function Bt(e,t){var r=e._controlledWritableStream;jt(e),ht(r,t)}function Lt(e){return new TypeError("WritableStream.prototype."+e+" can only be used on a WritableStream")}function It(e){return new TypeError("WritableStreamDefaultController.prototype."+e+" can only be used on a WritableStreamDefaultController")}function Mt(e){return new TypeError("WritableStreamDefaultWriter.prototype."+e+" can only be used on a WritableStreamDefaultWriter")}function Ft(e){return new TypeError("Cannot "+e+" a stream using a released writer")}function Dt(e){e._closedPromise=d((function(t,r){e._closedPromise_resolve=t,e._closedPromise_reject=r,e._closedPromiseState="pending"}))}function xt(e,t){Dt(e),Ut(e,t)}function Ut(e,t){void 0!==e._closedPromise_reject&&(y(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="rejected")}function Qt(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="resolved")}function Nt(e){e._readyPromise=d((function(t,r){e._readyPromise_resolve=t,e._readyPromise_reject=r})),e._readyPromiseState="pending"}function Yt(e,t){Nt(e),Vt(e,t)}function Ht(e){Nt(e),Gt(e)}function Vt(e,t){void 0!==e._readyPromise_reject&&(y(e._readyPromise),e._readyPromise_reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="rejected")}function Gt(e){void 0!==e._readyPromise_resolve&&(e._readyPromise_resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="fulfilled")}Object.defineProperties(Ct.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Ct.prototype,t.toStringTag,{value:"WritableStreamDefaultController",configurable:!0});var Kt,Xt="undefined"!=typeof DOMException?DOMException:void 0,Jt=function(e){if("function"!=typeof e&&"object"!=typeof e)return!1;try{return new e,!0}catch(e){return!1}}(Xt)?Xt:((Kt=function(e,t){this.message=e||"",this.name=t||"Error",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}).prototype=Object.create(Error.prototype),Object.defineProperty(Kt.prototype,"constructor",{value:Kt,writable:!0,configurable:!0}),Kt);function Zt(e,t,r,n,i,a){var l=V(e),u=ut(t);e._disturbed=!0;var s=!1,c=f(void 0);return d((function(v,g){var w,S,R,T;if(void 0!==a){if(w=function(){var r=new Jt("Aborted","AbortError"),o=[];n||o.push((function(){return"writable"===t._state?ft(t,r):f(void 0)})),i||o.push((function(){return"readable"===e._state?Rr(e,r):f(void 0)})),O((function(){return Promise.all(o.map((function(e){return e()})))}),!0,r)},a.aborted)return void w();a.addEventListener("abort",w)}if(q(e,l._closedPromise,(function(e){n?j(!0,e):O((function(){return ft(t,e)}),!0,e)})),q(t,u._closedPromise,(function(t){i?j(!0,t):O((function(){return Rr(e,t)}),!0,t)})),S=e,R=l._closedPromise,T=function(){r?j():O((function(){return t=(e=u)._ownerWritableStream,r=t._state,mt(t)||"closed"===r?f(void 0):"errored"===r?b(t._storedError):St(e);var e,t,r}))},"closed"===S._state?T():_(R,T),mt(t)||"closed"===t._state){var P=new TypeError("the destination writable stream closed before all data could be piped to it");i?j(!0,P):O((function(){return Rr(e,P)}),!0,P)}function C(){var e=c;return p(c,(function(){return e!==c?C():void 0}))}function q(e,t,r){"errored"===e._state?r(e._storedError):m(t,r)}function O(e,r,o){function n(){h(e(),(function(){return W(r,o)}),(function(e){return W(!0,e)}))}s||(s=!0,"writable"!==t._state||mt(t)?n():_(C(),n))}function j(e,r){s||(s=!0,"writable"!==t._state||mt(t)?W(e,r):_(C(),(function(){return W(e,r)})))}function W(e,t){Tt(u),E(l),void 0!==a&&a.removeEventListener("abort",w),e?g(t):v(void 0)}y(d((function(e,t){!function r(n){n?e():p(s?f(!0):p(u._readyPromise,(function(){return d((function(e,t){re(l,{_chunkSteps:function(t){c=p(Pt(u,t),void 0,o),e(!1)},_closeSteps:function(){return e(!0)},_errorSteps:t})}))})),r,t)}(!1)})))}))}var $t=function(){function e(){throw new TypeError("Illegal constructor")}return Object.defineProperty(e.prototype,"desiredSize",{get:function(){if(!er(this))throw cr("desiredSize");return lr(this)},enumerable:!1,configurable:!0}),e.prototype.close=function(){if(!er(this))throw cr("close");if(!ur(this))throw new TypeError("The stream is not in a state that permits close");nr(this)},e.prototype.enqueue=function(e){if(void 0===e&&(e=void 0),!er(this))throw cr("enqueue");if(!ur(this))throw new TypeError("The stream is not in a state that permits enqueue");return ir(this,e)},e.prototype.error=function(e){if(void 0===e&&(e=void 0),!er(this))throw cr("error");ar(this,e)},e.prototype[z]=function(e){he(this);var t=this._cancelAlgorithm(e);return or(this),t},e.prototype[B]=function(e){var t=this._controlledReadableStream;if(this._queue.length>0){var r=be(this);this._closeRequested&&0===this._queue.length?(or(this),Tr(t)):tr(this),e._chunkSteps(r)}else G(t,e),tr(this)},e}();function er(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableStream")&&e instanceof $t}function tr(e){rr(e)&&(e._pulling?e._pullAgain=!0:(e._pulling=!0,h(e._pullAlgorithm(),(function(){e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,tr(e))}),(function(t){ar(e,t)}))))}function rr(e){var t=e._controlledReadableStream;return!!ur(e)&&!!e._started&&(!!(Sr(t)&&X(t)>0)||lr(e)>0)}function or(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function nr(e){if(ur(e)){var t=e._controlledReadableStream;e._closeRequested=!0,0===e._queue.length&&(or(e),Tr(t))}}function ir(e,t){if(ur(e)){var r=e._controlledReadableStream;if(Sr(r)&&X(r)>0)K(r,t,!1);else{var o=void 0;try{o=e._strategySizeAlgorithm(t)}catch(t){throw ar(e,t),t}try{pe(e,t,o)}catch(t){throw ar(e,t),t}}tr(e)}}function ar(e,t){var r=e._controlledReadableStream;"readable"===r._state&&(he(e),or(e),Pr(r,t))}function lr(e){var t=e._controlledReadableStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function ur(e){var t=e._controlledReadableStream._state;return!e._closeRequested&&"readable"===t}function sr(e,t,r,o,n,i,a){t._controlledReadableStream=e,t._queue=void 0,t._queueTotalSize=void 0,he(t),t._started=!1,t._closeRequested=!1,t._pullAgain=!1,t._pulling=!1,t._strategySizeAlgorithm=a,t._strategyHWM=i,t._pullAlgorithm=o,t._cancelAlgorithm=n,e._readableStreamController=t,h(f(r()),(function(){t._started=!0,tr(t)}),(function(e){ar(t,e)}))}function cr(e){return new TypeError("ReadableStreamDefaultController.prototype."+e+" can only be used on a ReadableStreamDefaultController")}function dr(e,t,r){return F(e,r),function(r){return S(e,t,[r])}}function fr(e,t,r){return F(e,r),function(r){return S(e,t,[r])}}function br(e,t,r){return F(e,r),function(r){return w(e,t,[r])}}function pr(e,t){if("bytes"!=(e=""+e))throw new TypeError(t+" '"+e+"' is not a valid enumeration value for ReadableStreamType");return e}function hr(e,t){if("byob"!=(e=""+e))throw new TypeError(t+" '"+e+"' is not a valid enumeration value for ReadableStreamReaderMode");return e}function _r(e,t){M(e,t);var r=null==e?void 0:e.preventAbort,o=null==e?void 0:e.preventCancel,n=null==e?void 0:e.preventClose,i=null==e?void 0:e.signal;return void 0!==i&&function(e,t){if(!function(e){if("object"!=typeof e||null===e)return!1;try{return"boolean"==typeof e.aborted}catch(e){return!1}}(e))throw new TypeError(t+" is not an AbortSignal.")}(i,t+" has member 'signal' that"),{preventAbort:Boolean(r),preventCancel:Boolean(o),preventClose:Boolean(n),signal:i}}Object.defineProperties($t.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty($t.prototype,t.toStringTag,{value:"ReadableStreamDefaultController",configurable:!0});var mr=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={}),void 0===e?e=null:D(e,"First parameter");var r,o,n,i,a,l,u,s,c=$e(t,"Second parameter"),d=function(e,t){M(e,t);var r=e,o=null==r?void 0:r.autoAllocateChunkSize,n=null==r?void 0:r.cancel,i=null==r?void 0:r.pull,a=null==r?void 0:r.start,l=null==r?void 0:r.type;return{autoAllocateChunkSize:void 0===o?void 0:Y(o,t+" has member 'autoAllocateChunkSize' that"),cancel:void 0===n?void 0:dr(n,r,t+" has member 'cancel' that"),pull:void 0===i?void 0:fr(i,r,t+" has member 'pull' that"),start:void 0===a?void 0:br(a,r,t+" has member 'start' that"),type:void 0===l?void 0:pr(l,t+" has member 'type' that")}}(e,"First parameter");if(gr(this),"bytes"===d.type){if(void 0!==c.size)throw new RangeError("The strategy for a byte stream cannot have a size function");!function(e,t,r){var o=Object.create(me.prototype),n=function(){},i=function(){return f(void 0)},a=function(){return f(void 0)};void 0!==t.start&&(n=function(){return t.start(o)}),void 0!==t.pull&&(i=function(){return t.pull(o)}),void 0!==t.cancel&&(a=function(e){return t.cancel(e)});var l=t.autoAllocateChunkSize;if(0===l)throw new TypeError("autoAllocateChunkSize must be greater than 0");De(e,o,n,i,a,r,l)}(this,d,Je(c,0))}else{var b=Ze(c);r=this,o=d,n=Je(c,1),i=b,a=Object.create($t.prototype),l=function(){},u=function(){return f(void 0)},s=function(){return f(void 0)},void 0!==o.start&&(l=function(){return o.start(a)}),void 0!==o.pull&&(u=function(){return o.pull(a)}),void 0!==o.cancel&&(s=function(e){return o.cancel(e)}),sr(r,a,l,u,s,n,i)}}return Object.defineProperty(e.prototype,"locked",{get:function(){if(!wr(this))throw Er("locked");return Sr(this)},enumerable:!1,configurable:!0}),e.prototype.cancel=function(e){return void 0===e&&(e=void 0),wr(this)?Sr(this)?b(new TypeError("Cannot cancel a stream that already has a reader")):Rr(this,e):b(Er("cancel"))},e.prototype.getReader=function(e){if(void 0===e&&(e=void 0),!wr(this))throw Er("getReader");return void 0===function(e,t){M(e,t);var r=null==e?void 0:e.mode;return{mode:void 0===r?void 0:hr(r,t+" has member 'mode' that")}}(e,"First parameter").mode?V(this):Qe(this)},e.prototype.pipeThrough=function(e,t){if(void 0===t&&(t={}),!wr(this))throw Er("pipeThrough");x(e,1,"pipeThrough");var r=function(e,t){M(e,t);var r=null==e?void 0:e.readable;U(r,"readable","ReadableWritablePair"),H(r,t+" has member 'readable' that");var o=null==e?void 0:e.writable;return U(o,"writable","ReadableWritablePair"),it(o,t+" has member 'writable' that"),{readable:r,writable:o}}(e,"First parameter"),o=_r(t,"Second parameter");if(Sr(this))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");if(dt(r.writable))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");return y(Zt(this,r.writable,o.preventClose,o.preventAbort,o.preventCancel,o.signal)),r.readable},e.prototype.pipeTo=function(e,t){if(void 0===t&&(t={}),!wr(this))return b(Er("pipeTo"));if(void 0===e)return b("Parameter 1 is required in 'pipeTo'.");if(!ct(e))return b(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));var r;try{r=_r(t,"Second parameter")}catch(e){return b(e)}return Sr(this)?b(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")):dt(e)?b(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")):Zt(this,e,r.preventClose,r.preventAbort,r.preventCancel,r.signal)},e.prototype.tee=function(){if(!wr(this))throw Er("tee");return se(ve((e=this)._readableStreamController)?function(e){var t,r,o,n,i,a=V(e),l=!1,u=!1,s=!1,c=!1,b=!1,p=d((function(e){i=e}));function h(e){m(e._closedPromise,(function(t){e===a&&(Be(o._readableStreamController,t),Be(n._readableStreamController,t),c&&b||i(void 0))}))}function _(){Ge(a)&&(E(a),h(a=V(e))),re(a,{_chunkSteps:function(t){g((function(){u=!1,s=!1;var r=t,a=t;if(!c&&!b)try{a=fe(t)}catch(t){return Be(o._readableStreamController,t),Be(n._readableStreamController,t),void i(Rr(e,t))}c||ze(o._readableStreamController,r),b||ze(n._readableStreamController,a),l=!1,u?y():s&&w()}))},_closeSteps:function(){l=!1,c||Ae(o._readableStreamController),b||Ae(n._readableStreamController),o._readableStreamController._pendingPullIntos.length>0&&Me(o._readableStreamController,0),n._readableStreamController._pendingPullIntos.length>0&&Me(n._readableStreamController,0),c&&b||i(void 0)},_errorSteps:function(){l=!1}})}function v(t,r){te(a)&&(E(a),h(a=Qe(e)));var d=r?n:o,f=r?o:n;Ke(a,t,{_chunkSteps:function(t){g((function(){u=!1,s=!1;var o=r?b:c;if(r?c:b)o||Fe(d._readableStreamController,t);else{var n=void 0;try{n=fe(t)}catch(t){return Be(d._readableStreamController,t),Be(f._readableStreamController,t),void i(Rr(e,t))}o||Fe(d._readableStreamController,t),ze(f._readableStreamController,n)}l=!1,u?y():s&&w()}))},_closeSteps:function(e){l=!1;var t=r?b:c,o=r?c:b;t||Ae(d._readableStreamController),o||Ae(f._readableStreamController),void 0!==e&&(t||Fe(d._readableStreamController,e),!o&&f._readableStreamController._pendingPullIntos.length>0&&Me(f._readableStreamController,0)),t&&o||i(void 0)},_errorSteps:function(){l=!1}})}function y(){if(l)return u=!0,f(void 0);l=!0;var e=Le(o._readableStreamController);return null===e?_():v(e._view,!1),f(void 0)}function w(){if(l)return s=!0,f(void 0);l=!0;var e=Le(n._readableStreamController);return null===e?_():v(e._view,!0),f(void 0)}function S(){}return o=yr(S,y,(function(o){if(c=!0,t=o,b){var n=se([t,r]),a=Rr(e,n);i(a)}return p})),n=yr(S,w,(function(o){if(b=!0,r=o,c){var n=se([t,r]),a=Rr(e,n);i(a)}return p})),h(a),[o,n]}(e):function(e,t){var r,o,n,i,a,l=V(e),u=!1,s=!1,c=!1,b=!1,p=d((function(e){a=e}));function h(){return u?(s=!0,f(void 0)):(u=!0,re(l,{_chunkSteps:function(e){g((function(){s=!1;var t=e,r=e;c||ir(n._readableStreamController,t),b||ir(i._readableStreamController,r),u=!1,s&&h()}))},_closeSteps:function(){u=!1,c||nr(n._readableStreamController),b||nr(i._readableStreamController),c&&b||a(void 0)},_errorSteps:function(){u=!1}}),f(void 0))}function _(){}return n=vr(_,h,(function(t){if(c=!0,r=t,b){var n=se([r,o]),i=Rr(e,n);a(i)}return p})),i=vr(_,h,(function(t){if(b=!0,o=t,c){var n=se([r,o]),i=Rr(e,n);a(i)}return p})),m(l._closedPromise,(function(e){ar(n._readableStreamController,e),ar(i._readableStreamController,e),c&&b||a(void 0)})),[n,i]}(e));var e},e.prototype.values=function(e){if(void 0===e&&(e=void 0),!wr(this))throw Er("values");var t,r,o,n;return t=function(e,t){M(e,"First parameter");var r=null==e?void 0:e.preventCancel;return{preventCancel:Boolean(r)}}(e).preventCancel,r=V(this),o=new ne(r,t),(n=Object.create(ie))._asyncIteratorImpl=o,n},e}();function vr(e,t,r,o,n){void 0===o&&(o=1),void 0===n&&(n=function(){return 1});var i=Object.create(mr.prototype);return gr(i),sr(i,Object.create($t.prototype),e,t,r,o,n),i}function yr(e,t,r){var o=Object.create(mr.prototype);return gr(o),De(o,Object.create(me.prototype),e,t,r,0,void 0),o}function gr(e){e._state="readable",e._reader=void 0,e._storedError=void 0,e._disturbed=!1}function wr(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readableStreamController")&&e instanceof mr}function Sr(e){return void 0!==e._reader}function Rr(e,t){if(e._disturbed=!0,"closed"===e._state)return f(void 0);if("errored"===e._state)return b(e._storedError);Tr(e);var r=e._reader;return void 0!==r&&Ge(r)&&(r._readIntoRequests.forEach((function(e){e._closeSteps(void 0)})),r._readIntoRequests=new R),v(e._readableStreamController[z](t),o)}function Tr(e){e._state="closed";var t=e._reader;void 0!==t&&(W(t),te(t)&&(t._readRequests.forEach((function(e){e._closeSteps()})),t._readRequests=new R))}function Pr(e,t){e._state="errored",e._storedError=t;var r=e._reader;void 0!==r&&(j(r,t),te(r)?(r._readRequests.forEach((function(e){e._errorSteps(t)})),r._readRequests=new R):(r._readIntoRequests.forEach((function(e){e._errorSteps(t)})),r._readIntoRequests=new R))}function Er(e){return new TypeError("ReadableStream.prototype."+e+" can only be used on a ReadableStream")}function Cr(e,t){M(e,t);var r=null==e?void 0:e.highWaterMark;return U(r,"highWaterMark","QueuingStrategyInit"),{highWaterMark:Q(r)}}Object.defineProperties(mr.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(mr.prototype,t.toStringTag,{value:"ReadableStream",configurable:!0}),"symbol"==typeof t.asyncIterator&&Object.defineProperty(mr.prototype,t.asyncIterator,{value:mr.prototype.values,writable:!0,configurable:!0});var qr=function(e){return e.byteLength};Object.defineProperty(qr,"name",{value:"size",configurable:!0});var Or=function(){function e(e){x(e,1,"ByteLengthQueuingStrategy"),e=Cr(e,"First parameter"),this._byteLengthQueuingStrategyHighWaterMark=e.highWaterMark}return Object.defineProperty(e.prototype,"highWaterMark",{get:function(){if(!Wr(this))throw jr("highWaterMark");return this._byteLengthQueuingStrategyHighWaterMark},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){if(!Wr(this))throw jr("size");return qr},enumerable:!1,configurable:!0}),e}();function jr(e){return new TypeError("ByteLengthQueuingStrategy.prototype."+e+" can only be used on a ByteLengthQueuingStrategy")}function Wr(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_byteLengthQueuingStrategyHighWaterMark")&&e instanceof Or}Object.defineProperties(Or.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Or.prototype,t.toStringTag,{value:"ByteLengthQueuingStrategy",configurable:!0});var kr=function(){return 1};Object.defineProperty(kr,"name",{value:"size",configurable:!0});var Ar=function(){function e(e){x(e,1,"CountQueuingStrategy"),e=Cr(e,"First parameter"),this._countQueuingStrategyHighWaterMark=e.highWaterMark}return Object.defineProperty(e.prototype,"highWaterMark",{get:function(){if(!Br(this))throw zr("highWaterMark");return this._countQueuingStrategyHighWaterMark},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){if(!Br(this))throw zr("size");return kr},enumerable:!1,configurable:!0}),e}();function zr(e){return new TypeError("CountQueuingStrategy.prototype."+e+" can only be used on a CountQueuingStrategy")}function Br(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_countQueuingStrategyHighWaterMark")&&e instanceof Ar}function Lr(e,t,r){return F(e,r),function(r){return S(e,t,[r])}}function Ir(e,t,r){return F(e,r),function(r){return w(e,t,[r])}}function Mr(e,t,r){return F(e,r),function(r,o){return S(e,t,[r,o])}}Object.defineProperties(Ar.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Ar.prototype,t.toStringTag,{value:"CountQueuingStrategy",configurable:!0});var Fr=function(){function e(e,t,r){void 0===e&&(e={}),void 0===t&&(t={}),void 0===r&&(r={}),void 0===e&&(e=null);var o=$e(t,"Second parameter"),n=$e(r,"Third parameter"),i=function(e,t){M(e,t);var r=null==e?void 0:e.flush,o=null==e?void 0:e.readableType,n=null==e?void 0:e.start,i=null==e?void 0:e.transform,a=null==e?void 0:e.writableType;return{flush:void 0===r?void 0:Lr(r,e,t+" has member 'flush' that"),readableType:o,start:void 0===n?void 0:Ir(n,e,t+" has member 'start' that"),transform:void 0===i?void 0:Mr(i,e,t+" has member 'transform' that"),writableType:a}}(e,"First parameter");if(void 0!==i.readableType)throw new RangeError("Invalid readableType specified");if(void 0!==i.writableType)throw new RangeError("Invalid writableType specified");var a,l,u,s,c,p,h,_,m,y,g=Je(n,0),w=Ze(n),S=Je(o,1),R=Ze(o);!function(e,t,r,o,n,i){function a(){return t}e._writable=function(e,t,r,o,n,i){void 0===n&&(n=1),void 0===i&&(i=function(){return 1});var a=Object.create(lt.prototype);return st(a),Ot(a,Object.create(Ct.prototype),e,t,r,o,n,i),a}(a,(function(t){return o=t,n=(r=e)._transformStreamController,r._backpressure?v(r._backpressureChangePromise,(function(){var e=r._writable;if("erroring"===e._state)throw e._storedError;return Gr(n,o)})):Gr(n,o);var r,o,n}),(function(){return r=(t=e)._readable,o=t._transformStreamController,n=o._flushAlgorithm(),Hr(o),v(n,(function(){if("errored"===r._state)throw r._storedError;nr(r._readableStreamController)}),(function(e){throw xr(t,e),r._storedError}));var t,r,o,n}),(function(t){return xr(e,t),f(void 0)}),r,o),e._readable=vr(a,(function(){return Qr(t=e,!1),t._backpressureChangePromise;var t}),(function(t){return Ur(e,t),f(void 0)}),n,i),e._backpressure=void 0,e._backpressureChangePromise=void 0,e._backpressureChangePromise_resolve=void 0,Qr(e,!0),e._transformStreamController=void 0}(this,d((function(e){a=e})),S,R,g,w),l=this,u=i,_=Object.create(Nr.prototype),m=function(e){try{return Vr(_,e),f(void 0)}catch(e){return b(e)}},y=function(){return f(void 0)},void 0!==u.transform&&(m=function(e){return u.transform(e,_)}),void 0!==u.flush&&(y=function(){return u.flush(_)}),s=l,p=m,h=y,(c=_)._controlledTransformStream=s,s._transformStreamController=c,c._transformAlgorithm=p,c._flushAlgorithm=h,void 0!==i.start?a(i.start(this._transformStreamController)):a(void 0)}return Object.defineProperty(e.prototype,"readable",{get:function(){if(!Dr(this))throw Xr("readable");return this._readable},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"writable",{get:function(){if(!Dr(this))throw Xr("writable");return this._writable},enumerable:!1,configurable:!0}),e}();function Dr(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_transformStreamController")&&e instanceof Fr}function xr(e,t){ar(e._readable._readableStreamController,t),Ur(e,t)}function Ur(e,t){Hr(e._transformStreamController),At(e._writable._writableStreamController,t),e._backpressure&&Qr(e,!1)}function Qr(e,t){void 0!==e._backpressureChangePromise&&e._backpressureChangePromise_resolve(),e._backpressureChangePromise=d((function(t){e._backpressureChangePromise_resolve=t})),e._backpressure=t}Object.defineProperties(Fr.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Fr.prototype,t.toStringTag,{value:"TransformStream",configurable:!0});var Nr=function(){function e(){throw new TypeError("Illegal constructor")}return Object.defineProperty(e.prototype,"desiredSize",{get:function(){if(!Yr(this))throw Kr("desiredSize");return lr(this._controlledTransformStream._readable._readableStreamController)},enumerable:!1,configurable:!0}),e.prototype.enqueue=function(e){if(void 0===e&&(e=void 0),!Yr(this))throw Kr("enqueue");Vr(this,e)},e.prototype.error=function(e){if(void 0===e&&(e=void 0),!Yr(this))throw Kr("error");var t;t=e,xr(this._controlledTransformStream,t)},e.prototype.terminate=function(){if(!Yr(this))throw Kr("terminate");var e;nr((e=this._controlledTransformStream)._readable._readableStreamController),Ur(e,new TypeError("TransformStream terminated"))},e}();function Yr(e){return!!i(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledTransformStream")&&e instanceof Nr}function Hr(e){e._transformAlgorithm=void 0,e._flushAlgorithm=void 0}function Vr(e,t){var r=e._controlledTransformStream,o=r._readable._readableStreamController;if(!ur(o))throw new TypeError("Readable side is not in a state that permits enqueue");try{ir(o,t)}catch(e){throw Ur(r,e),r._readable._storedError}!rr(o)!==r._backpressure&&Qr(r,!0)}function Gr(e,t){return v(e._transformAlgorithm(t),void 0,(function(t){throw xr(e._controlledTransformStream,t),t}))}function Kr(e){return new TypeError("TransformStreamDefaultController.prototype."+e+" can only be used on a TransformStreamDefaultController")}function Xr(e){return new TypeError("TransformStream.prototype."+e+" can only be used on a TransformStream")}Object.defineProperties(Nr.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Nr.prototype,t.toStringTag,{value:"TransformStreamDefaultController",configurable:!0});var Jr={ReadableStream:mr,ReadableStreamDefaultController:$t,ReadableByteStreamController:me,ReadableStreamBYOBRequest:_e,ReadableStreamDefaultReader:ee,ReadableStreamBYOBReader:Ve,WritableStream:lt,WritableStreamDefaultController:Ct,WritableStreamDefaultWriter:gt,ByteLengthQueuingStrategy:Or,CountQueuingStrategy:Ar,TransformStream:Fr,TransformStreamDefaultController:Nr};if(void 0!==n)for(var Zr in Jr)Object.prototype.hasOwnProperty.call(Jr,Zr)&&Object.defineProperty(n,Zr,{value:Jr[Zr],writable:!0,configurable:!0});e.ByteLengthQueuingStrategy=Or,e.CountQueuingStrategy=Ar,e.ReadableByteStreamController=me,e.ReadableStream=mr,e.ReadableStreamBYOBReader=Ve,e.ReadableStreamBYOBRequest=_e,e.ReadableStreamDefaultController=$t,e.ReadableStreamDefaultReader=ee,e.TransformStream=Fr,e.TransformStreamDefaultController=Nr,e.WritableStream=lt,e.WritableStreamDefaultController=Ct,e.WritableStreamDefaultWriter=gt,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof o?t(o):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).WebStreamsPolyfill={});var n={};n=(()=>{"use strict";const e="object"==typeof window?window:n;e.HTMLElement||console.warn("streamsaver is meant to run on browsers main thread");let t=null,r=!1;const o=e.WebStreamsPolyfill||{},i=e.isSecureContext;let a=/constructor/i.test(e.HTMLElement)||!!e.safari||!!e.WebKitPoint;const l=i||"MozAppearance"in document.documentElement.style?"iframe":"navigate",u={createWriteStream:function(o,n,c){let d={size:null,pathname:null,writableStrategy:void 0,readableStrategy:void 0},f=0,b=null,p=null,h=null;if(Number.isFinite(n)?([c,n]=[n,c],console.warn("[StreamSaver] Deprecated pass an object as 2nd argument when creating a write stream"),d.size=c,d.writableStrategy=n):n&&n.highWaterMark?(console.warn("[StreamSaver] Deprecated pass an object as 2nd argument when creating a write stream"),d.size=c,d.writableStrategy=n):d=n||{},!a){t||(t=i?s(u.mitm):function(t){const r="width=200,height=100",o=document.createDocumentFragment(),n={frame:e.open(t,"popup",r),loaded:!1,isIframe:!1,isPopup:!0,remove(){n.frame.close()},addEventListener(...e){o.addEventListener(...e)},dispatchEvent(...e){o.dispatchEvent(...e)},removeEventListener(...e){o.removeEventListener(...e)},postMessage(...e){n.frame.postMessage(...e)}},i=t=>{t.source===n.frame&&(n.loaded=!0,e.removeEventListener("message",i),n.dispatchEvent(new Event("load")))};return e.addEventListener("message",i),n}(u.mitm)),p=new MessageChannel,o=encodeURIComponent(o.replace(/\//g,":")).replace(/['()]/g,escape).replace(/\*/g,"%2A");const n={transferringReadable:r,pathname:d.pathname||Math.random().toString().slice(-6)+"/"+o,headers:{"Content-Type":"application/octet-stream; charset=utf-8","Content-Disposition":"attachment; filename*=UTF-8''"+o}};d.size&&(n.headers["Content-Length"]=d.size);const a=[n,"*",[p.port2]];if(r){const e="iframe"===l?void 0:{transform(e,t){if(!(e instanceof Uint8Array))throw new TypeError("Can only write Uint8Arrays");f+=e.length,t.enqueue(e),b&&(location.href=b,b=null)},flush(){b&&(location.href=b)}};h=new u.TransformStream(e,d.writableStrategy,d.readableStrategy);const t=h.readable;p.port1.postMessage({readableStream:t},[t])}p.port1.onmessage=e=>{e.data.download?"navigate"===l?(t.remove(),t=null,f?location.href=e.data.download:b=e.data.download):(t.isPopup&&(t.remove(),t=null,"iframe"===l&&s(u.mitm)),s(e.data.download)):e.data.abort&&(_=[],p.port1.postMessage("abort"),p.port1.onmessage=null,p.port1.close(),p.port2.close(),p=null)},t.loaded?t.postMessage(...a):t.addEventListener("load",(()=>{t.postMessage(...a)}),{once:!0})}let _=[];return!a&&h&&h.writable||new u.WritableStream({write(e){if(!(e instanceof Uint8Array))throw new TypeError("Can only write Uint8Arrays");a?_.push(e):(p.port1.postMessage(e),f+=e.length,b&&(location.href=b,b=null))},close(){if(a){const e=new Blob(_,{type:"application/octet-stream; charset=utf-8"}),t=document.createElement("a");t.href=URL.createObjectURL(e),t.download=o,t.click()}else p.port1.postMessage("end")},abort(){_=[],p.port1.postMessage("abort"),p.port1.onmessage=null,p.port1.close(),p.port2.close(),p=null}},d.writableStrategy)},WritableStream:e.WritableStream||o.WritableStream,supported:!0,version:{full:"2.0.5",major:2,minor:0,dot:5},mitm:"https://jimmywarting.github.io/StreamSaver.js/mitm.html?version=2.0.0"};function s(e){if(!e)throw new Error("meh");const t=document.createElement("iframe");return t.hidden=!0,t.src=e,t.loaded=!1,t.name="iframe",t.isIframe=!0,t.postMessage=(...e)=>t.contentWindow.postMessage(...e),t.addEventListener("load",(()=>{t.loaded=!0}),{once:!0}),document.body.appendChild(t),t}try{new Response(new ReadableStream),i&&!("serviceWorker"in navigator)&&(a=!0)}catch(e){a=!0}return(e=>{try{e()}catch(e){}})((()=>{const{readable:e}=new TransformStream,t=new MessageChannel;t.port1.postMessage(e,[e]),t.port1.close(),t.port2.close(),r=!0,Object.defineProperty(u,"TransformStream",{configurable:!1,writable:!1,value:TransformStream})})),u})();var i,a,l=null,u=Date.now(),s={enabled:!0,filter:!0};function c(e,t){var r=new DataView(e.view(0,1));if(s.filter){if(0==t&&73==r.getUint8(0))return;if(1==t&&21==r.getUint8(0))return}var o=new ArrayBuffer(e.byteLength+13),n=new DataView(o),i=1e4*(Date.now()-u);n.setUint8(0,t),n.setBigUint64(1,new BigInt(i)),n.setUint32(9,e.byteLength),o.slice(13).set(e),l.getWriter().write(o)}SWAM.on("extensionsLoaded",(function(){class e extends WebSocket{constructor(e){super(e);var t=this.send;this.send=function(e){return l&&c(e,1),t(e)}}}window.WebSocket=e,addEventListener("message",(function(e){l&&c(e.data,0)})),addEventListener("beforeunload",(function(){l&&l.close(),l=null}))})),SWAM.on("gameRunning",(function(){l&&l.close(),l=null,s.enabled&&(l=n.createWriteStream("airmash.trace"))})),SWAM.on("gameWipe",(function(){l&&l.close(),l=null})),SWAM.registerExtension({name:"AIRMASH Gameplay Recorder",id:"airmash-recorder",description:"Gameplay Recorder for Airmash",author:"STEAMROLLER",version:"0.1.0",settingsProvider:(i=new SettingsProvider(s,(function(e){s.enabled=e.enabled,s.filter=e.filter})),a=i.addSection("Gameplay Recorder"),a.addBoolean("enabled","Whether games should be recorded. If this is set then every time you join a game a download for a trace file will start.",{useToggle:!1}),a.addBoolean("filter","Whether whispers should be filtered from the recording",{useToggle:!1}),i)})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
